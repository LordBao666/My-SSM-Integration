<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.lordbao</groupId>
    <artifactId>My-SSM-Integration</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 默认为jar.
         设置为pom表明该项目是一个聚合项目或父项目
         设置为war时，表明是一个web 应用
    -->
    <packaging>pom</packaging>
    <modules>
        <module>ssm-integration-practice</module>
        <module>ssm-integration-todolist</module>
    </modules>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!--
         本注解相当重要，要求编译器在编译时连同参数名也编译进去.
         在SpringMVC环境中，如果不添加此配置，则反射无法完成，无法从前端接收数据
         -->
        <maven.compiler.parameters>true</maven.compiler.parameters>

        <!--  各依赖版本控制   -->
        <spring.version>6.1.11</spring.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Spring相关依赖 -->
            <!--spring-context 依赖  即 spring基础环境依赖
                该依赖是复合依赖，其下有子依赖aop core beans expression等
            -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- spring-aspects
            Spring AOP 借用了 aspectJ的注解以完成切面。常用的注解如@Aspect,@PointCut
            @Before,@AfterReturning,@AfterThrowing等
            因此需要导入此依赖
            -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${spring.version}</version>
            </dependency>
          <!-- spring-tx模块提供了对事务的管理支持，包括声明式事务管理和编程式事务管理
               spring-tx 是事务管理器规范，注意仅是规范，支持不同类型的事务管理器，如JDBC、JDBCTemplate,
               Hibernate、JPA、Mybatis等
               支持声明式事务：允许通过注解（如@Transactional）或XML配置来定义事务
          -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- spring-jdbc
             1 提供半自动ORM 框架JDBCTemplate
             2 包含DataSource方式事务管理器实现类DataSourceTransactionManager，可以用其管理JDBC，JDBCTemplate
             Mybatis的事务。注意，其他事务管理器实现要导入其他包，比如spring-orm包含其他持久层框架的事务管理器
            实现类例如：Hibernate/Jpa等
             -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${spring.version}</version>
            </dependency>
           <!--
           @Resource = @Autowired +@Qualifier
           @Resource注解属于JDK扩展包(不是Spring提供的，Spring只提供了实现)，所以不在JDK当中，
           需要额外引入以下依赖：【高于JDK11或低于JDK8需要引入以下依赖】-->
            <dependency>
                <groupId>jakarta.annotation</groupId>
                <artifactId>jakarta.annotation-api</artifactId>
                <version>2.1.1</version>
            </dependency>

            <!-- SpringMVC 相关依赖 -->
            <!-- web相关依赖  -->
            <!-- 在 pom.xml 中引入 Jakarta EE Web API 的依赖 -->
            <!--
                在 Spring Web MVC 6 中，Servlet API 迁移到了 Jakarta EE API，因此在配置 DispatcherServlet 时需要使用
                 Jakarta EE 提供的相应类库和命名空间。错误信息 “‘org.springframework.web.servlet.DispatcherServlet’
                 is not assignable to ‘javax.servlet.Servlet,jakarta.servlet.Servlet’” 表明你使用了旧版本的
                 Servlet API，没有更新到 Jakarta EE 规范。
            -->
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-web-api</artifactId>
                <version>9.1.0</version>
                <scope>provided</scope>
            </dependency>
            <!-- spring web mvc相关依赖  -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!--  用于 JSON格式的string 和 object之间转换          -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.15.0</version>
            </dependency>
            <!-- 校验注解相关的2个依赖  在SpringMVC高级特性有所阐述，比如@NotEmpty @Size @MIN-->
            <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
            <dependency>
                <groupId>org.hibernate.validator</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>8.0.0.Final</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor -->
            <dependency>
                <groupId>org.hibernate.validator</groupId>
                <artifactId>hibernate-validator-annotation-processor</artifactId>
                <version>8.0.0.Final</version>
            </dependency>

            <!-- jsp需要依赖! jstl-->
            <dependency>
                <groupId>jakarta.servlet.jsp.jstl</groupId>
                <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
                <version>3.0.0</version>
            </dependency>


            <!-- 整合相关依赖-->
            <!-- 加载Spring容器-->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!--  整合mybatis -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>3.0.3</version>
            </dependency>


            <!--数据库相关依赖-->
            <!-- mybatis -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.5.16</version>
            </dependency>
            <!-- mysql-connector           -->
            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>8.4.0</version>
            </dependency>
            <!-- druid connection pool    -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.1.12</version>
            </dependency>
            <!-- pagehelper -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>6.1.0</version>
            </dependency>



            <!--   简化开发框架         -->
            <!--lombok-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.34</version>
                <scope>provided</scope>
            </dependency>

            <!--   日志相关依赖 可以和lombok配合使用  -->
            <!--   会自动传递依赖 slf4j -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.5.6</version>
            </dependency>

            <!-- 测试相关依赖 -->
            <!--junit5测试-->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.10.2</version>
                <scope>test</scope>
            </dependency>
            <!-- spring-test
             用于Spring环境的集成测试 常用注解@SpringJUnitConfig 在此情况下，引入相关配置类
             而无需自己手动创建容器. 本SSM集成无需用到该依赖包，但列在这里, 以防忘记

             注意spring-test版本要和junit5的版本兼容，比如spring-test6.1.11和 junit-jupiter-api 5.10.2就是兼容的
            -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${spring.version}</version>
                <scope>test</scope>
            </dependency>


        </dependencies>
    </dependencyManagement>

</project>